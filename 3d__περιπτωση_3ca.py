# -*- coding: utf-8 -*-
"""3d__περιπτωση 3CAipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zbQsAbCf2X6dQtx57gtvU8Kzt2-OTlIh
"""

import numpy as np
import matplotlib.pyplot as plt

# === ΠΑΡΑΜΕΤΡΟΙ ===
size = int(input("Μέγεθος πλέγματος (π.χ. 10): "))
generations = int(input("Αριθμός γενιών (π.χ. 20): "))
states = int(input("Αριθμός καταστάσεων κυψελίδων (π.χ. 2): "))
threshold = int(input("Κατώφλι ενεργοποίησης (π.χ. 13 για Moore 3D): "))

# === ΑΡΧΙΚΟΠΟΙΗΣΗ ===
def initialize_grid_3d(size, states):
    grid = np.random.randint(0, states, (size, size, size))
    return grid

# === Moore 3D ΓΕΙΤΟΝΙΑ ===
def get_moore_neighbors_3d(grid, x, y, z):
    neighbors = []
    size = grid.shape[0]
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            for dz in [-1, 0, 1]:
                if dx == 0 and dy == 0 and dz == 0:
                    continue
                nx, ny, nz = (x + dx) % size, (y + dy) % size, (z + dz) % size
                neighbors.append(grid[nx, ny, nz])
    return neighbors

# === ΚΑΝΟΝΑΣ ΕΞΕΛΙΞΗΣ ===
def evolve_grid(grid, states, threshold):
    new_grid = np.zeros_like(grid)
    size = grid.shape[0]
    for x in range(size):
        for y in range(size):
            for z in range(size):
                neighbors = get_moore_neighbors_3d(grid, x, y, z)
                active_neighbors = sum(1 for n in neighbors if n > 0)
                if active_neighbors >= threshold:
                    new_grid[x, y, z] = (grid[x, y, z] + 1) % states
                else:
                    new_grid[x, y, z] = grid[x, y, z]
    return new_grid

# === ΕΚΤΕΛΕΣΗ ===
grid = initialize_grid_3d(size, states)

for t in range(generations):
    print(f"Γενιά {t}")
    mid_slice = grid[:, :, size // 2]
    plt.imshow(mid_slice, cmap="viridis")
    plt.title(f"Slice Z={size//2} - Γενιά {t}")
    plt.colorbar(label="Κατάσταση")
    plt.pause(0.3)  # Παύση για animation effect
    plt.clf()  # Καθαρισμός του καμβά για την επόμενη γενιά
    grid = evolve_grid(grid, states, threshold)

plt.show()  # Εμφάνιση του τελικού αποτελέσματος
